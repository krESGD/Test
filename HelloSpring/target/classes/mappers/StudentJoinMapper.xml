<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="StudentJoinMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="Student_Department" type="study.spring.hellospring.model.StudentDepartmentProfessor">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="studno" column="studno" />
		<result property="name" column="name" />
		<result property="userid" column="userid" />
		<result property="grade" column="grade" />
		<result property="idnum" column="idnum" />
		<result property="birthdate" column="birthdate" />
		<result property="tel" column="tel" />
		<result property="height" column="height" />
		<result property="weight" column="weight" />
		<result property="deptno" column="deptno" />
		<result property="dname" column="dname" />
		<result property="profno" column="profno" />
		<result property="pname" column="pname" />
	</resultMap>


	<!--
		단일행 조회를 위한 기능 정의
		<select id="메서드이름에 해당하는 식별자"
				parameterType="파라미터의 데이터 타입(Beans의 클래스명)" 
				resultMap="리턴될 Beans이름">
	-->
	<select id="get_StudentJoin_item" 
	    	parameterType="study.spring.hellospring.model.StudentDepartmentProfessor" 
	    	resultMap="Student_Department">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수가 치환된다. -->
		SELECT studno, student.name as name, student.userid as userid, grade, idnum, date_format(birthdate, '%Y-%m-%d') as birthdate, tel, height, weight, student.deptno as deptno, department.dname as dname, student.profno as profno, COALESCE(professor.name, "없음") as pname 
		FROM student 
		INNER JOIN department ON student.deptno=department.deptno
		LEFT OUTER JOIN professor ON student.profno=professor.profno
		WHERE studno=#{studno};
	</select>

	<!--
		다중행 조회를 위한 기능 정의
		<select id="메서드이름에 해당하는 식별자" 
				parameterType="파라미터로 전달될 객체의 클래스 타입"
				resultMap="리턴될 Beans이름">
	-->
	<select id="get_StudentJoin_list" parameterType="study.spring.hellospring.model.StudentDepartmentProfessor" resultMap="Student_Department">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT studno, student.name as name, student.userid as userid, grade, idnum, 
		date_format(birthdate, '%Y-%m-%d') as birthdate, 
		tel, height, weight, student.deptno as deptno, department.dname as dname, student.profno as profno, COALESCE(professor.name, "없음") as pname 
		FROM student 
		INNER JOIN department ON student.deptno=department.deptno
		LEFT OUTER JOIN professor ON student.profno=professor.profno 
		
		<where>
			<if test="name != null and name != ''">
				student.name Like concat('%', #{name}, '%')
			</if>
		</where>
		
		<!-- ORDER BY studno DESC
		LIMIT #{limitStart}, #{listCount}; -->
	</select>
	
	<!-- 조인 결과에 대한 전체 데이터 수 얻기 -->
	<select id="selectStudentCount" parameterType="study.spring.hellospring.model.StudentDepartmentProfessor" resultType="int">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT count(studno) 
		FROM student INNER JOIN department ON student.deptno=department.deptno
		LEFT OUTER JOIN professor ON student.profno=professor.profno 
		
		<where>
			<if test="name != null and name != ''">
				student.name Like concat('%', #{name}, '%')
			</if>
		</where>		
	</select>
	
</mapper>